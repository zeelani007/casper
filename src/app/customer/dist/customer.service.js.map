{"version":3,"sources":["customer.service.ts"],"names":[],"mappings":"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","file":"customer.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BackendService } from '../_services'\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\n\nimport { Customer } from './customer';\n\n@Injectable()\nexport class CustomerService {\n  private basicAction = 'customers/';\n\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  getCustomers(): Observable<Customer[]> {\n    return this.backend.getAll(this.basicAction)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getCustomer(id: number): Observable<Customer> {\n    if (id === 0) {\n      return Observable.of(this.initializeCustomer());\n    };\n    const action = `${this.basicAction}${id}`;\n    return this.backend.getById(action)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  deleteCustomer(id: number): Observable<Response> {\n\n    const action = `${this.basicAction}${id}`;\n    return this.backend.delete(action)\n      .catch(this.handleError);\n  }\n\n  saveCustomer(customer: Customer): Observable<Customer> {\n\n\n    if (customer.id === 0) {\n      return this.createCustomer(customer);\n    }\n    return this.updateCustomer(customer);\n  }\n\n  private createCustomer(customer: Customer): Observable<Customer> {\n    customer.id = undefined;\n    return this.backend.create(this.basicAction, customer)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private updateCustomer(customer: Customer): Observable<Customer> {\n    const action = `${this.basicAction}${customer.id}`;\n    return this.backend.update(action, customer)\n      .map(() => customer)\n      .catch(this.handleError);\n  }\n\n  private extractData(response: Response) {\n    let body : any = response.json ? response.json() : response;\n    return body.data ? body.data : (body || {});\n  }\n\n  private handleError(error: Response): Observable<any> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    console.error(error);\n    return Observable.throw(error.json() || 'Server error');\n  }\n\n  initializeCustomer(): Customer {\n    // Return an initialized object\n    return {\n      id: 0,\n      avatar: null,\n      firstname: null,\n      lastname: null,\n      rewards: 0,\n      email: null,\n      membership: false,\n      mobile: null,\n      phone:null\n    };\n  }\n}\n"]}