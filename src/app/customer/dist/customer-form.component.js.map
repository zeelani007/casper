{"version":3,"sources":["customer-form.component.ts"],"names":[],"mappings":"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","file":"customer-form.component.js","sourcesContent":["import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName, MaxLengthValidator } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { Customer } from './customer';\nimport { CustomerService } from './customer.service';\n\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n\n@Component({\n    selector: 'customer-form',\n    templateUrl: './customer-form.component.html',\n    styles: [`\n    .title-spacer {\n        flex: 1 1 auto;\n      }\n    .form-field{\n        width: 100%;\n        margin-left: 20px;\n        margin-right: 20px;\n    }\n    .avatar-field {\n        left: 0;\n        margin: 0 auto;\n        position: absolute;\n        margin-left: 50px;\n    }\n    `]\n})\nexport class CustomerFormComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];\n\n    pageTitle: string = 'Update Customer';\n    errorMessage: string;\n    customerForm: FormGroup;\n    customer: Customer = <Customer>{};\n    private sub: Subscription;\n    showImage: boolean;\n    imageWidth: number = 100;\n    imageMargin: number = 2;\n    fieldColspan = 3;\n\n    // Use with the generic validation message class\n    displayMessage: { [key: string]: string } = {};\n    private genericValidator: GenericValidator;\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    private validationMessages: { [key: string]: { [key: string]: string } | {} } = {\n        firstname: {\n            required: 'Customer first name is required.',\n            minlength: 'Customer first name must be at least one characters.',\n            maxlength: 'Customer first name cannot exceed 100 characters.'\n        },\n        lastname: {\n            required: 'Customer last name is required.',\n            minlength: 'Customer last name must be at least one characters.',\n            maxlength: 'Customer last name cannot exceed 100 characters.'\n        },\n        email: {\n            required: 'Customer email is required.',\n            minlength: 'Customer email must be at least one characters.',\n            maxlength: 'Customer email cannot exceed 200 characters.'\n        },\n        rewards: {\n            range: 'Rewards of the customer must be between 0 (lowest) and 150 (highest).'\n        },\n        phone: { maxlength: 'Customer phone cannot exceed 12 characters.' },\n        mobile: { maxlength: 'Customer mobile cannot exceed 12 characters.' },\n    };\n\n    constructor(private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private customerService: CustomerService,\n        private breakpointObserver: BreakpointObserver\n    ) {\n        breakpointObserver.observe([\n            Breakpoints.HandsetLandscape,\n            Breakpoints.HandsetPortrait\n        ]).subscribe(result => {\n            // console.log(result)\n            this.onScreensizeChange(result);\n        });\n        this.genericValidator = new GenericValidator(this.validationMessages);\n\n    }\n\n    ngOnInit(): void {\n        this.customerForm = this.fb.group({\n            firstname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n            lastname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n            email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(200)]],\n            rewards: ['', NumberValidators.range(0, 150)],\n            phone: ['', Validators.maxLength(12)],\n            mobile: ['', Validators.maxLength(12)],\n            membership: false,\n        });\n\n        // Read the customer Id from the route parameter\n        this.sub = this.route.params.subscribe(\n            params => {\n                let id = +params['id'];\n                this.getCustomer(id);\n            }\n        );\n\n        this.sub.add(null);\n    }\n\n    ngOnDestroy(): void {\n        this.sub.unsubscribe();\n    }\n\n    ngAfterViewInit(): void {\n        // Watch for the blur event from any input element on the form.\n        const controlBlurs: Observable<any>[] = this.formInputElements\n            .map((formControl: ElementRef) => Observable.fromEvent(formControl.nativeElement, 'blur'));\n\n        // Merge the blur event observable with the valueChanges observable\n        Observable.merge(this.customerForm.valueChanges, ...controlBlurs).debounceTime(500).subscribe(value => {\n            this.displayMessage = this.genericValidator.processMessages(this.customerForm);\n        });\n    }\n\n    getCustomer(id: number): void {\n        this.customerService.getCustomer(id)\n            .subscribe(\n                (customer: Customer) => this.onCustomerRetrieved(customer),\n                (error: any) => this.errorMessage = <any>error\n            );\n    }\n\n    onCustomerRetrieved(customer: Customer): void {\n        if (this.customerForm) {\n            this.customerForm.reset();\n        }\n        this.customer = customer;\n\n        if (this.customer.id === 0) {\n            this.pageTitle = 'New Customer';\n        } else {\n            this.pageTitle = `Customer: ${this.customer.firstname} ${this.customer.lastname}`;\n        }\n\n        // Update the data on the form\n        this.customerForm.patchValue({\n            firstname: this.customer.firstname,\n            lastname: this.customer.lastname,\n            email: this.customer.email,\n            rewards: this.customer.rewards,\n            phone: this.customer.phone,\n            mobile: this.customer.mobile,\n            membership: this.customer.membership\n        });\n    }\n\n    deleteCustomer(): void {\n        if (this.customer.id === 0) {\n            // Don't delete, it was never saved.\n            this.onSaveComplete();\n        } else {\n            if (confirm(`Really delete the customer: ${this.customer.firstname}?`)) {\n                this.customerService.deleteCustomer(this.customer.id)\n                    .subscribe(\n                        () => this.onSaveComplete(),\n                        (error: any) => this.errorMessage = <any>error\n                    );\n            }\n        }\n    }\n\n    toggleImage(): void {\n        event.preventDefault();\n        this.showImage = !this.showImage;\n    }\n\n\n    saveCustomer(): void {\n        if (this.customerForm.dirty && this.customerForm.valid) {\n            // Copy the form values over the customer object values\n            const customer = Object.assign({}, this.customer, this.customerForm.value);\n\n            this.customerService.saveCustomer(customer)\n                .subscribe(\n                    () => this.onSaveComplete(),\n                    (error: any) => this.errorMessage = <any>error\n                );\n        } else if (!this.customerForm.dirty) {\n            this.onSaveComplete();\n        }\n    }\n\n    onSaveComplete(): void {\n        // Reset the form to clear the flags\n        this.customerForm.reset();\n        this.router.navigate(['/customers']);\n    }\n\n    onScreensizeChange(result: any) {\n        // debugger\n        const isLess600 = this.breakpointObserver.isMatched('(max-width: 599px)');\n        const isLess1000 = this.breakpointObserver.isMatched('(max-width: 959px)');\n        console.log(\n            ` isLess600  ${isLess600} \n            isLess1000 ${isLess1000}  `\n        )\n        if (isLess1000) {\n            if (isLess600) {\n                this.fieldColspan = 12;\n            }\n            else {\n                this.fieldColspan = 6;\n            }\n        }\n        else {\n            this.fieldColspan = 3;\n        }\n    }\n}\n"]}