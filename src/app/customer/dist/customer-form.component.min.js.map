{"version":3,"sources":["customer-form.component.ts"],"names":["core_1","require","forms_1","Observable_1","number_validator_1","generic_validator_1","layout_1","CustomerFormComponent","fb","route","router","customerService","breakpointObserver","_this","this","pageTitle","customer","imageWidth","imageMargin","fieldColspan","displayMessage","validationMessages","firstname","required","minlength","maxlength","lastname","email","rewards","range","phone","mobile","observe","Breakpoints","HandsetLandscape","HandsetPortrait","subscribe","result","onScreensizeChange","genericValidator","GenericValidator","prototype","ngOnInit","customerForm","group","Validators","minLength","maxLength","NumberValidators","membership","sub","params","id","getCustomer","add","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","Observable","fromEvent","nativeElement","merge","apply","__spreadArrays","valueChanges","debounceTime","value","processMessages","onCustomerRetrieved","error","errorMessage","reset","patchValue","deleteCustomer","onSaveComplete","confirm","toggleImage","event","preventDefault","showImage","saveCustomer","dirty","valid","Object","assign","navigate","isLess600","isMatched","isLess1000","console","log","__decorate","ViewChildren","FormControlName","read","ElementRef","Component","selector","templateUrl","styles","exports"],"mappings":"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","file":"customer-form.component.min.js","sourcesContent":["import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName, MaxLengthValidator } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { Customer } from './customer';\nimport { CustomerService } from './customer.service';\n\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n\n@Component({\n    selector: 'customer-form',\n    templateUrl: './customer-form.component.html',\n    styles: [`\n    .title-spacer {\n        flex: 1 1 auto;\n      }\n    .form-field{\n        width: 100%;\n        margin-left: 20px;\n        margin-right: 20px;\n    }\n    .avatar-field {\n        left: 0;\n        margin: 0 auto;\n        position: absolute;\n        margin-left: 50px;\n    }\n    `]\n})\nexport class CustomerFormComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];\n\n    pageTitle: string = 'Update Customer';\n    errorMessage: string;\n    customerForm: FormGroup;\n    customer: Customer = <Customer>{};\n    private sub: Subscription;\n    showImage: boolean;\n    imageWidth: number = 100;\n    imageMargin: number = 2;\n    fieldColspan = 3;\n\n    // Use with the generic validation message class\n    displayMessage: { [key: string]: string } = {};\n    private genericValidator: GenericValidator;\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    private validationMessages: { [key: string]: { [key: string]: string } | {} } = {\n        firstname: {\n            required: 'Customer first name is required.',\n            minlength: 'Customer first name must be at least one characters.',\n            maxlength: 'Customer first name cannot exceed 100 characters.'\n        },\n        lastname: {\n            required: 'Customer last name is required.',\n            minlength: 'Customer last name must be at least one characters.',\n            maxlength: 'Customer last name cannot exceed 100 characters.'\n        },\n        email: {\n            required: 'Customer email is required.',\n            minlength: 'Customer email must be at least one characters.',\n            maxlength: 'Customer email cannot exceed 200 characters.'\n        },\n        rewards: {\n            range: 'Rewards of the customer must be between 0 (lowest) and 150 (highest).'\n        },\n        phone: { maxlength: 'Customer phone cannot exceed 12 characters.' },\n        mobile: { maxlength: 'Customer mobile cannot exceed 12 characters.' },\n    };\n\n    constructor(private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private customerService: CustomerService,\n        private breakpointObserver: BreakpointObserver\n    ) {\n        breakpointObserver.observe([\n            Breakpoints.HandsetLandscape,\n            Breakpoints.HandsetPortrait\n        ]).subscribe(result => {\n            // console.log(result)\n            this.onScreensizeChange(result);\n        });\n        this.genericValidator = new GenericValidator(this.validationMessages);\n\n    }\n\n    ngOnInit(): void {\n        this.customerForm = this.fb.group({\n            firstname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n            lastname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n            email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(200)]],\n            rewards: ['', NumberValidators.range(0, 150)],\n            phone: ['', Validators.maxLength(12)],\n            mobile: ['', Validators.maxLength(12)],\n            membership: false,\n        });\n\n        // Read the customer Id from the route parameter\n        this.sub = this.route.params.subscribe(\n            params => {\n                let id = +params['id'];\n                this.getCustomer(id);\n            }\n        );\n\n        this.sub.add(null);\n    }\n\n    ngOnDestroy(): void {\n        this.sub.unsubscribe();\n    }\n\n    ngAfterViewInit(): void {\n        // Watch for the blur event from any input element on the form.\n        const controlBlurs: Observable<any>[] = this.formInputElements\n            .map((formControl: ElementRef) => Observable.fromEvent(formControl.nativeElement, 'blur'));\n\n        // Merge the blur event observable with the valueChanges observable\n        Observable.merge(this.customerForm.valueChanges, ...controlBlurs).debounceTime(500).subscribe(value => {\n            this.displayMessage = this.genericValidator.processMessages(this.customerForm);\n        });\n    }\n\n    getCustomer(id: number): void {\n        this.customerService.getCustomer(id)\n            .subscribe(\n                (customer: Customer) => this.onCustomerRetrieved(customer),\n                (error: any) => this.errorMessage = <any>error\n            );\n    }\n\n    onCustomerRetrieved(customer: Customer): void {\n        if (this.customerForm) {\n            this.customerForm.reset();\n        }\n        this.customer = customer;\n\n        if (this.customer.id === 0) {\n            this.pageTitle = 'New Customer';\n        } else {\n            this.pageTitle = `Customer: ${this.customer.firstname} ${this.customer.lastname}`;\n        }\n\n        // Update the data on the form\n        this.customerForm.patchValue({\n            firstname: this.customer.firstname,\n            lastname: this.customer.lastname,\n            email: this.customer.email,\n            rewards: this.customer.rewards,\n            phone: this.customer.phone,\n            mobile: this.customer.mobile,\n            membership: this.customer.membership\n        });\n    }\n\n    deleteCustomer(): void {\n        if (this.customer.id === 0) {\n            // Don't delete, it was never saved.\n            this.onSaveComplete();\n        } else {\n            if (confirm(`Really delete the customer: ${this.customer.firstname}?`)) {\n                this.customerService.deleteCustomer(this.customer.id)\n                    .subscribe(\n                        () => this.onSaveComplete(),\n                        (error: any) => this.errorMessage = <any>error\n                    );\n            }\n        }\n    }\n\n    toggleImage(): void {\n        event.preventDefault();\n        this.showImage = !this.showImage;\n    }\n\n\n    saveCustomer(): void {\n        if (this.customerForm.dirty && this.customerForm.valid) {\n            // Copy the form values over the customer object values\n            const customer = Object.assign({}, this.customer, this.customerForm.value);\n\n            this.customerService.saveCustomer(customer)\n                .subscribe(\n                    () => this.onSaveComplete(),\n                    (error: any) => this.errorMessage = <any>error\n                );\n        } else if (!this.customerForm.dirty) {\n            this.onSaveComplete();\n        }\n    }\n\n    onSaveComplete(): void {\n        // Reset the form to clear the flags\n        this.customerForm.reset();\n        this.router.navigate(['/customers']);\n    }\n\n    onScreensizeChange(result: any) {\n        // debugger\n        const isLess600 = this.breakpointObserver.isMatched('(max-width: 599px)');\n        const isLess1000 = this.breakpointObserver.isMatched('(max-width: 959px)');\n        console.log(\n            ` isLess600  ${isLess600} \n            isLess1000 ${isLess1000}  `\n        )\n        if (isLess1000) {\n            if (isLess600) {\n                this.fieldColspan = 12;\n            }\n            else {\n                this.fieldColspan = 6;\n            }\n        }\n        else {\n            this.fieldColspan = 3;\n        }\n    }\n}\n"]}