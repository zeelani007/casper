{"version":3,"sources":["customer.service.ts"],"names":["core_1","require","Observable_1","CustomerService","http","backend","this","basicAction","prototype","getCustomers","getAll","map","extractData","handleError","getCustomer","id","Observable","of","initializeCustomer","action","getById","deleteCustomer","saveCustomer","customer","createCustomer","updateCustomer","undefined","create","update","response","body","json","data","error","console","avatar","firstname","lastname","rewards","email","membership","mobile","phone","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAGAC,aAAAD,QAAA,mBACAA,QAAA,wBACAA,QAAA,2BACAA,QAAA,6BACAA,QAAA,yBACAA,QAAA,0BAKA,IAAAE,gBAAA,WAGE,SAAAA,EAAoBC,EAA0BC,GAA1BC,KAAAF,KAAAA,EAA0BE,KAAAD,QAAAA,EAFtCC,KAAAC,YAAc,aA4ExB,OAxEEJ,EAAAK,UAAAC,aAAA,WACE,OAAOH,KAAKD,QAAQK,OAAOJ,KAAKC,aAC7BI,IAAIL,KAAKM,aACJ,MAACN,KAAKO,cAGhBV,EAAAK,UAAAM,YAAA,SAAYC,GACV,GAAW,IAAPA,EACF,OAAOb,aAAAc,WAAWC,GAAGX,KAAKY,sBAE5B,IAAMC,EAAS,GAAGb,KAAKC,YAAcQ,EACrC,OAAOT,KAAKD,QAAQe,QAAQD,GACzBR,IAAIL,KAAKM,aACJ,MAACN,KAAKO,cAGhBV,EAAAK,UAAAa,eAAA,SAAeN,GAEb,IAAMI,EAAS,GAAGb,KAAKC,YAAcQ,EACrC,OAAOT,KAAKD,QAAc,OAACc,GACnB,MAACb,KAAKO,cAGhBV,EAAAK,UAAAc,aAAA,SAAaC,GAGX,OAAoB,IAAhBA,EAASR,GACJT,KAAKkB,eAAeD,GAEtBjB,KAAKmB,eAAeF,IAGrBpB,EAAAK,UAAAgB,eAAR,SAAuBD,GAErB,OADAA,EAASR,QAAKW,EACPpB,KAAKD,QAAQsB,OAAOrB,KAAKC,YAAagB,GAC1CZ,IAAIL,KAAKM,aACJ,MAACN,KAAKO,cAGRV,EAAAK,UAAAiB,eAAR,SAAuBF,GACrB,IAAMJ,EAAS,GAAGb,KAAKC,YAAcgB,EAASR,GAC9C,OAAOT,KAAKD,QAAQuB,OAAOT,EAAQI,GAChCZ,IAAI,WAAM,OAAAY,IACL,MAACjB,KAAKO,cAGRV,EAAAK,UAAAI,YAAR,SAAoBiB,GAClB,IAAIC,EAAaD,EAASE,KAAOF,EAASE,OAASF,EACnD,OAAOC,EAAKE,KAAOF,EAAKE,KAAQF,GAAQ,IAGlC3B,EAAAK,UAAAK,YAAR,SAAoBoB,GAIlB,OADAC,QAAQD,MAAMA,GACP/B,aAAAc,WAAgB,MAACiB,EAAMF,QAAU,iBAG1C5B,EAAAK,UAAAU,mBAAA,WAEE,MAAO,CACLH,GAAI,EACJoB,OAAQ,KACRC,UAAW,KACXC,SAAU,KACVC,QAAS,EACTC,MAAO,KACPC,YAAY,EACZC,OAAQ,KACRC,MAAM,OA1ECvC,EAAewC,WAAA,CAD3B3C,OAAA4C,cACYzC,GAAb,GAAa0C,QAAA1C,gBAAAA","file":"customer.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BackendService } from '../_services'\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\n\nimport { Customer } from './customer';\n\n@Injectable()\nexport class CustomerService {\n  private basicAction = 'customers/';\n\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  getCustomers(): Observable<Customer[]> {\n    return this.backend.getAll(this.basicAction)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getCustomer(id: number): Observable<Customer> {\n    if (id === 0) {\n      return Observable.of(this.initializeCustomer());\n    };\n    const action = `${this.basicAction}${id}`;\n    return this.backend.getById(action)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  deleteCustomer(id: number): Observable<Response> {\n\n    const action = `${this.basicAction}${id}`;\n    return this.backend.delete(action)\n      .catch(this.handleError);\n  }\n\n  saveCustomer(customer: Customer): Observable<Customer> {\n\n\n    if (customer.id === 0) {\n      return this.createCustomer(customer);\n    }\n    return this.updateCustomer(customer);\n  }\n\n  private createCustomer(customer: Customer): Observable<Customer> {\n    customer.id = undefined;\n    return this.backend.create(this.basicAction, customer)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private updateCustomer(customer: Customer): Observable<Customer> {\n    const action = `${this.basicAction}${customer.id}`;\n    return this.backend.update(action, customer)\n      .map(() => customer)\n      .catch(this.handleError);\n  }\n\n  private extractData(response: Response) {\n    let body : any = response.json ? response.json() : response;\n    return body.data ? body.data : (body || {});\n  }\n\n  private handleError(error: Response): Observable<any> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    console.error(error);\n    return Observable.throw(error.json() || 'Server error');\n  }\n\n  initializeCustomer(): Customer {\n    // Return an initialized object\n    return {\n      id: 0,\n      avatar: null,\n      firstname: null,\n      lastname: null,\n      rewards: 0,\n      email: null,\n      membership: false,\n      mobile: null,\n      phone:null\n    };\n  }\n}\n"]}