{"version":3,"sources":["customer-list.component.ts"],"names":["core_1","require","shared_1","paginator_1","sort_1","table_1","CustomerListComponent","customerService","dialog","snackBar","this","pageTitle","imageWidth","imageMargin","showImage","listFilter","displayedColumns","dataSource","pager","searchFilter","firstname","lastname","email","prototype","applyFilter","filterValue","trim","toLowerCase","filter","freshDataList","customers","MatTableDataSource","paginator","sort","ngOnInit","_this","getCustomers","subscribe","error","errorMessage","pageNum","searchCustomers","filters","console","log","length","customer","match","Object","keys","forEach","k","toLocaleLowerCase","indexOf","resetListFilter","reset","resetSearchFilter","searchPanel","toggle","openSnackBar","message","action","open","duration","openDialog","id","dialogRef","ConfirmDialog","data","title","disableClose","afterClosed","result","selectedOption","componentInstance","ACTION_CONFIRM","deleteCustomer","__decorate","ViewChild","MatPaginator","MatSort","Component","selector","templateUrl","styleUrls","providers","exports"],"mappings":"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","file":"customer-list.component.min.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\n\nimport { Customer } from './customer';\nimport { CustomerService } from './customer.service';\nimport { PagerService } from '../_services';\nimport { ConfirmDialog } from '../shared';\nimport * as _ from 'lodash';\n\nimport {MatDialog} from '@angular/material/dialog'\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTableDataSource } from '@angular/material/table';\n\n\n@Component({\n    selector: 'customer-list',\n    templateUrl: './customer-list.component.html',\n    styleUrls: ['./customer-list.component.css'],\n    providers: [ConfirmDialog]\n})\nexport class CustomerListComponent implements OnInit {\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort) sort: MatSort;\n\n\n    pageTitle: string = 'Customers';\n    imageWidth: number = 30;\n    imageMargin: number = 2;\n    showImage: boolean = false;\n    listFilter: any = {};\n    errorMessage: string;\n\n    customers: Customer[];\n    customerList: Customer[]; //\n    displayedColumns = [\"avatar\", \"firstname\", \"lastname\", \"rewards\", \"email\", \"membership\", \"id\"];\n    dataSource: any = null;\n    pager: any = {};\n    pagedItems: any[];\n    searchFilter: any = {\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\"\n    };\n    selectedOption: string;\n\n\n    constructor(\n        private customerService: CustomerService,\n        // private pagerService: PagerService,\n        public dialog: MatDialog,\n        public snackBar: MatSnackBar) {\n    }\n\n    applyFilter(filterValue: string) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n        this.dataSource.filter = filterValue;\n    }\n\n    freshDataList(customers: Customer[]) {\n        this.customers = customers;\n\n        this.dataSource = new MatTableDataSource(this.customers);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    }\n\n    ngOnInit(): void {\n        this.customerService.getCustomers()\n            .subscribe(customers => {\n                this.freshDataList(customers);\n            },\n            error => this.errorMessage = <any>error);\n\n        this.searchFilter = {};\n        this.listFilter = {};\n    }\n\n    getCustomers(pageNum?: number) {\n        this.customerService.getCustomers()\n            .subscribe(customers => {\n                this.freshDataList(customers);\n            },\n            error => this.errorMessage = <any>error);\n    }\n\n    searchCustomers(filters: any) {\n        if (filters) {\n            this.customerService.getCustomers()\n                .subscribe(customers => {\n                    this.customers = customers;\n                    console.log(this.customers.length)\n                    this.customers = this.customers.filter((customer: Customer) => {\n                        let match = true;\n\n                        Object.keys(filters).forEach((k) => {\n                            match = match && filters[k] ?\n                                customer[k].toLocaleLowerCase().indexOf(filters[k].toLocaleLowerCase()) > -1 : match;\n                        })\n                        return match;\n                    });\n                    this.freshDataList(customers);\n                },\n                error => this.errorMessage = <any>error);\n        }\n\n    }\n\n    resetListFilter() {\n        this.listFilter = {};\n        this.getCustomers();\n    }\n\n    reset() {\n        this.listFilter = {};\n        this.searchFilter = {};\n        this.getCustomers();\n\n    }\n\n    resetSearchFilter(searchPanel: any) {\n        searchPanel.toggle();\n        this.searchFilter = {};\n        this.getCustomers();\n    }\n\n    openSnackBar(message: string, action: string) {\n        this.snackBar.open(message, action, {\n            duration: 1500,\n        });\n    }\n\n    openDialog(id: number) {\n        let dialogRef = this.dialog.open(ConfirmDialog,\n            { data: { title: 'Dialog', message: 'Are you sure to delete this item?' } });\n        dialogRef.disableClose = true;\n\n\n        dialogRef.afterClosed().subscribe(result => {\n            this.selectedOption = result;\n\n            if (this.selectedOption === dialogRef.componentInstance.ACTION_CONFIRM) {\n                this.customerService.deleteCustomer(id).subscribe(\n                    () => {\n                        this.customerService.getCustomers()\n                            .subscribe(customers => {\n                                this.freshDataList(customers);\n                            },\n                            error => this.errorMessage = <any>error);\n                        this.openSnackBar(\"The item has been deleted successfully. \", \"Close\");\n                    },\n                    (error: any) => {\n                        this.errorMessage = <any>error;\n                        console.log(this.errorMessage);\n                        this.openSnackBar(\"This item has not been deleted successfully. Please try again.\", \"Close\");\n                    }\n                );\n            }\n        });\n    }\n\n\n\n}\n"]}