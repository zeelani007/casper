{"version":3,"sources":["register.component.ts"],"names":["core_1","require","forms_1","RegisterComponent","builder","service","router","toastr","this","registerform","group","id","control","Validators","compose","required","minLength","name","password","pattern","email","gender","role","isactive","prototype","proceedregister","_this","valid","RegisterUser","value","subscribe","result","success","navigate","warning","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,QAAAD,QAAA,kBAWAE,kBAAA,WAEE,SAAAA,EAAoBC,EAA8BC,EAA8BC,EACtEC,GADUC,KAAAJ,QAAAA,EAA8BI,KAAAH,QAAAA,EAA8BG,KAAAF,OAAAA,EACtEE,KAAAD,OAAAA,EAIVC,KAAAC,aAAeD,KAAKJ,QAAQM,MAAM,CAChCC,GAAIH,KAAKJ,QAAQQ,QAAQ,GAAIV,QAAAW,WAAWC,QAAQ,CAACZ,QAAAW,WAAWE,SAAUb,QAAAW,WAAWG,UAAU,MAC3FC,KAAMT,KAAKJ,QAAQQ,QAAQ,GAAIV,QAAAW,WAAWE,UAC1CG,SAAUV,KAAKJ,QAAQQ,QAAQ,GAAIV,QAAAW,WAAWC,QAAQ,CAACZ,QAAAW,WAAWE,SAAUb,QAAAW,WAAWM,QAAQ,8EAC/FC,MAAOZ,KAAKJ,QAAQQ,QAAQ,GAAIV,QAAAW,WAAWC,QAAQ,CAACZ,QAAAW,WAAWE,SAAUb,QAAAW,WAAWO,SACpFC,OAAQb,KAAKJ,QAAQQ,QAAQ,QAC7BU,KAAMd,KAAKJ,QAAQQ,QAAQ,IAC3BW,SAAUf,KAAKJ,QAAQQ,SAAQ,KAanC,OAXET,EAAAqB,UAAAC,gBAAA,WAAA,IAAAC,EAAAlB,KACMA,KAAKC,aAAakB,MACpBnB,KAAKH,QAAQuB,aAAapB,KAAKC,aAAaoB,OAAOC,UAAU,SAAAC,GAC3DL,EAAKnB,OAAOyB,QAAQ,0CAA0C,2BAC9DN,EAAKpB,OAAO2B,SAAS,CAAC,YAGxBzB,KAAKD,OAAO2B,QAAQ,6BAvBb/B,EAAiBgC,WAAA,CAL7BnC,OAAAoC,UAAU,CACTC,SAAU,eACVC,YAAa,4BACbC,UAAW,CAAC,gCAEDpC,GAAb,GAAaqC,QAAArC,kBAAAA","file":"register.component.min.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.services';\nimport { ToastrService } from 'ngx-toastr'\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor(private builder: FormBuilder, private service: AuthService, private router: Router,\n    private toastr: ToastrService) {\n\n  }\n\n  registerform = this.builder.group({\n    id: this.builder.control('', Validators.compose([Validators.required, Validators.minLength(5)])),\n    name: this.builder.control('', Validators.required),\n    password: this.builder.control('', Validators.compose([Validators.required, Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}')])),\n    email: this.builder.control('', Validators.compose([Validators.required, Validators.email])),\n    gender: this.builder.control('male'),\n    role: this.builder.control(''),\n    isactive: this.builder.control(false)\n  });\n  proceedregister() {\n    if (this.registerform.valid) {\n      this.service.RegisterUser(this.registerform.value).subscribe(result => {\n        this.toastr.success('Please contact admin for enable access.','Registered successfully')\n        this.router.navigate(['login'])\n      });\n    } else {\n      this.toastr.warning('Please enter valid data.')\n    }\n  }\n\n}\n"]}