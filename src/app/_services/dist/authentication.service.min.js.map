{"version":3,"sources":["authentication.service.ts"],"names":["core_1","require","APP_USER_PROFILE","AuthenticationService","http","backend","this","prototype","login","user","map","response","data","access_token","token","isAuthenticated","localStorage","setItem","JSON","stringify","logout","removeItem","getUser","parse","getItem","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAEAA,QAAA,yBAKA,IAAMC,iBAAmB,kBAEzBC,sBAAA,WACE,SAAAA,EAAoBC,EAA0BC,GAA1BC,KAAAF,KAAAA,EAA0BE,KAAAD,QAAAA,EAgChD,OA9BEF,EAAAI,UAAAC,MAAA,SAAMC,GACJ,OAAOH,KAAKD,QAAQG,MAAM,QAASC,GAChCC,IAAI,SAACC,GAEJ,IAAIC,EAAaD,EACbF,EAAaG,EAAKH,KAClBA,GAAQG,EAAKC,eAEfJ,EAAKK,MAAQF,EAAKC,aAClBJ,EAAKM,iBAAkB,EACvBC,aAAaC,QAAQf,iBAAkBgB,KAAKC,UAAUV,QAK9DN,EAAAI,UAAAa,OAAA,WAEEJ,aAAaK,WAAWnB,mBAG1BC,EAAAI,UAAAQ,gBAAA,WACE,IAAIN,EAASH,KAAKgB,UAClB,SAAOb,IAAQA,EAAKM,kBAGtBZ,EAAAI,UAAAe,QAAA,WAEE,OADiBJ,KAAKK,MAAMP,aAAaQ,QAAQtB,oBA7BxCC,EAAqBsB,WAAA,CADjCzB,OAAA0B,cACYvB,GAAb,GAAawB,QAAAxB,sBAAAA","file":"authentication.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport 'rxjs/add/operator/map'\nimport { User } from '../_models'\nimport { BackendService } from './backend.service'\n\n\nconst APP_USER_PROFILE = \"NG_CRM_USER_2.0\"\n@Injectable()\nexport class AuthenticationService {\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  login(user: any) {\n    return this.backend.login('token', user)\n      .map((response: Response) => {\n        // login successful if there's a token in the response\n        let data = (<any>response);\n        let user = <User>data.user;\n        if (user && data.access_token) {\n          // store user details and token in local storage to keep user logged in between page refreshes\n          user.token = data.access_token;\n          user.isAuthenticated = true;\n          localStorage.setItem(APP_USER_PROFILE, JSON.stringify(user));\n        }\n      });\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem(APP_USER_PROFILE);\n  }\n\n  isAuthenticated() {\n    let user =   this.getUser() // <User>JSON.parse(localStorage.getItem(APP_USER_PROFILE));\n    return user && user.isAuthenticated ? true : false;\n  }\n\n  getUser(){\n    let user = <User>JSON.parse(localStorage.getItem(APP_USER_PROFILE));\n    return user;\n  }\n\n}\n"]}