{"version":3,"sources":["backend.service.ts"],"names":["core_1","require","Rx_1","demo_db_1","BackendService","http","location","this","baseUrl","ds","Object","assign","console","log","prototype","getModel","action","includes","indexOf","substring","getId","model","substr","length","getExpand","undefined","getEmbed","getData","self","Promise","resolve","reject","result","expand","expandId","idStr","id","isNaN","parseInt","exp","expandModel","findIndex","d","map","m","setTimeout","data","getAll","Observable","fromPromise","getByQuery","getById","create","push","update","idx","splice","status","login","user","_a","token","access_token","__decorate","Injectable","exports"],"mappings":"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","file":"backend.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { HttpClient,  } from '@angular/common/http';\nimport { Observable } from 'rxjs/Rx';\nimport { User } from '../_models';\nimport db from \"./demo.db\";\n// import { AuthenticationService } from '.';\n\n\n@Injectable()\nexport class BackendService {\n\n  private baseUrl: string = \"\";\n  ds: any;\n\n  constructor(private http: HttpClient, \n    private location: Location) {\n    // console.log(http);\n    // this.location.prepareExternalUrl(this.baseUrl);\n    this.ds = Object.assign({},db ) || {}\n    console.log(this.ds)\n  }\n\n  getModel(action) {\n    if (action.includes('?') && action.includes('/')) {\n      return action.indexOf('?') > action.indexOf('/') ? action.substring(0, action.indexOf('/')) : action.substring(0, action.indexOf('?'))\n    } else {\n      return action.includes('?') ? action.substring(0, action.indexOf('?')) : action.substring(0, action.indexOf('/'))\n    }\n  }\n\n  getId(action, model) {\n    action = action.substr(model.length + 1)\n    return action.length > 0 && (action.includes('?') ? action.substring(0, action.indexOf('?')) : action)\n  }\n\n  getExpand(action, model) {\n    action = action.substr(action.indexOf('?'))\n    return action.includes('_expand') ? (\n      action.includes('&') ?\n        action.substring('_expand='.length + 1, action.indexOf('&')) :\n        action.substring('_expand='.length + 1)) : undefined\n  }\n\n  getEmbed(action) {\n    return action.includes('?') ? action.substring(action.indexOf('/'), action.indexOf('?')) : action.substring(action.indexOf('/'))\n  }\n\n  getData(action: string) {\n    const self = this\n    return new Promise(function (resolve, reject) {\n      const model = self.getModel(action)\n      const idStr = self.getId(action, model)\n      const id = isNaN(idStr) ? undefined : parseInt(idStr)\n      let exp = self.getExpand(action, model)\n      const expandModel = exp ? exp === \"category\" ? \"categories\" : exp + \"s\" : exp\n      const embed = self.getEmbed(action)\n      console.log(model)\n      let result\n      let expand, expandId\n      console.log(expandModel)\n      if (model in self.ds) {\n        if (id) {\n          result = self.ds[model][self.ds[model].findIndex(d => d.id === id)]\n\n          if (expandModel) {\n            expand = expandModel === \"categories\" ? \"category\" : expandModel.substr(0, expandModel.length - 1)\n            expandId = result[expand + \"Id\"]\n            result[expand] = self.ds[expandModel][self.ds[expandModel].findIndex(d => d.id === expandId)]\n          }\n        } else {\n          result = self.ds[model].map(m => {\n            if (expandModel) {\n              expand = expandModel === \"categories\" ? \"category\" : expandModel.substr(0, expandModel.length - 1)\n              expandId = m[expand + \"Id\"]\n              m[expand] = self.ds[expandModel][self.ds[expandModel].findIndex(d => d.id === expandId)]\n            }\n            return m\n          })\n        }\n      }\n      setTimeout(resolve, 200, { data: result })\n    });\n  }\n\n\n  getAll(action: string) {\n    return Observable.fromPromise(this.getData(action))\n  }\n\n  getByQuery(action: string) {\n    return Observable.fromPromise(this.getData(action))\n  }\n\n  getById(action: string) {\n    // const url = `${this.baseUrl}${action}`\n    // return this.http.get(url, this.jwt()).map((response: Response) => response.json());\n    return Observable.fromPromise(this.getData(action))\n  }\n\n  create(action: string, data: any) {\n    return Observable.fromPromise(new Promise(function (resolve, reject) {\n      const model = this.getModel(action)\n      data.id = this.ds[model] + 1\n      this.ds[model].push(data)\n      setTimeout(resolve, 200, { data: data })\n    }))\n  }\n\n  update(action: string, data: any) {\n    return Observable.fromPromise(new Promise(function (resolve, reject) {\n      const model = this.getModel(action)\n      const idx = this.ds[model].findIndex(d => d.id === data.id)\n      this.ds[model][idx] = Object.assign({}, data)\n      setTimeout(resolve, 200, { data: data })\n    }))\n\n  }\n\n  delete(action: string) {\n    return Observable.fromPromise(new Promise(function (resolve, reject) {\n      const model = this.getModel(action)\n      const id = this.getId()\n      id && this.ds[model].splice(this.ds[model].findIndex(d => d.id === id))\n      setTimeout(resolve, 200, { status: 200 })\n    }))\n  }\n\n  login(action: string, user: User) {\n    const self = this;\n    console.log(this.ds)\n    return Observable.fromPromise(new Promise(function (resolve, reject) {\n      const { access_token, user } = self.ds.token\n      setTimeout(resolve, 200, {\n        // data: {\n        access_token,\n        user\n        // }\n      })\n    }));\n  }\n\n  // private helper methods\n  // private form() {\n  //   let headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });\n  //   return { headers: headers };\n  // }\n\n  // private jwt() {\n  //   // create authorization header with jwt token\n  //   let user =  this.authService.getUser() //JSON.parse( );\n  //   if (user && user.token) {\n  //     let headers = new Headers({ 'Authorization': 'Bearer ' + user.token });\n  //     return { headers: headers } ;\n  //   }\n  // }\n\n  // private handleError(error: Response) {\n  //   console.error(error);\n  //   return Observable.throw(error.json() || 'Server error');\n  // }\n}\n"]}