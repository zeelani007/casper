{"version":3,"sources":["authentication.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAE3C,iCAA8B;AAK9B,IAAM,gBAAgB,GAAG,iBAAiB,CAAA;AAE1C;IACE,+BAAoB,IAAgB,EAAU,OAAuB;QAAjD,SAAI,GAAJ,IAAI,CAAY;QAAU,YAAO,GAAP,OAAO,CAAgB;IAAI,CAAC;IAE1E,qCAAK,GAAL,UAAM,IAAS;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;aACrC,GAAG,CAAC,UAAC,QAAkB;YACtB,sDAAsD;YACtD,IAAI,IAAI,GAAS,QAAS,CAAC;YAC3B,IAAI,IAAI,GAAS,IAAI,CAAC,IAAI,CAAC;YAC3B,IAAI,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE;gBAC7B,8FAA8F;gBAC9F,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;gBAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,YAAY,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;aAC9D;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAM,GAAN;QACE,iDAAiD;QACjD,YAAY,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAC5C,CAAC;IAED,+CAAe,GAAf;QACE,IAAI,IAAI,GAAK,IAAI,CAAC,OAAO,EAAE,CAAA,CAAC,4DAA4D;QACxF,OAAO,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACrD,CAAC;IAED,uCAAO,GAAP;QACE,IAAI,IAAI,GAAS,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACpE,OAAO,IAAI,CAAC;IACd,CAAC;IA/BU,qBAAqB;QADjC,iBAAU,EAAE;OACA,qBAAqB,CAiCjC;IAAD,4BAAC;CAjCD,AAiCC,IAAA;AAjCY,sDAAqB","file":"authentication.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport 'rxjs/add/operator/map'\nimport { User } from '../_models'\nimport { BackendService } from './backend.service'\n\n\nconst APP_USER_PROFILE = \"NG_CRM_USER_2.0\"\n@Injectable()\nexport class AuthenticationService {\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  login(user: any) {\n    return this.backend.login('token', user)\n      .map((response: Response) => {\n        // login successful if there's a token in the response\n        let data = (<any>response);\n        let user = <User>data.user;\n        if (user && data.access_token) {\n          // store user details and token in local storage to keep user logged in between page refreshes\n          user.token = data.access_token;\n          user.isAuthenticated = true;\n          localStorage.setItem(APP_USER_PROFILE, JSON.stringify(user));\n        }\n      });\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem(APP_USER_PROFILE);\n  }\n\n  isAuthenticated() {\n    let user =   this.getUser() // <User>JSON.parse(localStorage.getItem(APP_USER_PROFILE));\n    return user && user.isAuthenticated ? true : false;\n  }\n\n  getUser(){\n    let user = <User>JSON.parse(localStorage.getItem(APP_USER_PROFILE));\n    return user;\n  }\n\n}\n"]}