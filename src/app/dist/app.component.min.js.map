{"version":3,"sources":["app.component.ts"],"names":["core_1","require","layout_1","router_1","AppComponent","route","authService","breakpointObserver","_this","this","title","user","mode","uiContent","progrssBarClass","isloading","isadmin","isMenuVisible","console","log","observe","Breakpoints","HandsetLandscape","HandsetPortrait","subscribe","result","matches","isMobile","prototype","ngOnChanges","ngOnInit","getUser","logout","navigate","isAuth","navigationInterceptor","event","NavigationStart","NavigationEnd","NavigationCancel","NavigationError","ngOnDestroy","ngDoCheck","currentroute","url","role","sessionStorage","getItem","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,SAAAD,QAAA,uBACAE,SAAAF,QAAA,mBAUAG,aAAA,WAYE,SAAAA,EAEUC,EACDC,EACCC,GAJV,IAAAC,EAAAC,KAEUA,KAAAJ,MAAAA,EACDI,KAAAH,YAAAA,EACCG,KAAAF,mBAAAA,EAfVE,KAAAC,MAAQ,SACRD,KAAAE,KAAY,KAEZF,KAAAG,KAAO,OACPH,KAAAI,UAAY,UACZJ,KAAAK,gBAAkB,eAClBL,KAAAM,WAAY,EACXN,KAAAO,SAAQ,EACTP,KAAAQ,eAAc,EAUZC,QAAQC,IAAI,gBAEZV,KAAKM,WAAY,EAEjBR,EAAmBa,QAAQ,CACzBlB,SAAAmB,YAAYC,iBACZpB,SAAAmB,YAAYE,kBACXC,UAAU,SAAAC,GACXP,QAAQC,IAAIM,GACRA,EAAOC,SAETlB,EAAKmB,UAAW,EAChBnB,EAAKI,KAAO,OACZJ,EAAKK,UAAY,mBAGjBL,EAAKmB,UAAW,EAChBnB,EAAKI,KAAO,OACZJ,EAAKK,UAAY,aAgFzB,OAtEET,EAAAwB,UAAAC,YAAA,WACEX,QAAQC,IAAI,iBAIdf,EAAAwB,UAAAE,SAAA,WACEZ,QAAQC,IAAI,aACZV,KAAKE,KAAOF,KAAKH,YAAYyB,UAC7BtB,KAAKM,WAAY,GAGnBX,EAAAwB,UAAAI,OAAA,WAEEvB,KAAKH,YAAY0B,SACjBvB,KAAKJ,MAAM4B,SAAS,CAAC,WAKvB7B,EAAAwB,UAAAM,OAAA,SAAOA,GACDA,IACFzB,KAAKE,KAAOF,KAAKH,YAAYyB,YAKzB3B,EAAAwB,UAAAO,sBAAR,SAA8BC,GACxBA,aAAiBjC,SAAAkC,kBACnB5B,KAAMK,gBAAkB,eACxBL,KAAKM,WAAY,GAEfqB,aAAiBjC,SAAAmC,gBACnB7B,KAAMK,gBAAkB,sBACxBL,KAAKM,WAAY,GAEfqB,aAAiBjC,SAAAoC,mBACnB9B,KAAMK,gBAAkB,sBACxBL,KAAKM,WAAY,GAEfqB,aAAiBjC,SAAAqC,kBACnB/B,KAAMK,gBAAkB,sBACxBL,KAAKM,WAAY,IAMrBX,EAAAwB,UAAAa,YAAA,WACEhC,KAAKF,mBAAmBkC,cACxBhC,KAAKH,YAAY0B,UAInB5B,EAAAwB,UAAAc,UAAA,WACE,IAAIC,EAAelC,KAAKJ,MAAMuC,IAC1BC,EAAKC,eAAeC,QAAQ,QAE9BtC,KAAKQ,cADa,UAAhB0B,GAA4C,aAAhBA,EAO9BlC,KAAKO,QADK,SAAR6B,GA7GKzC,EAAY4C,WAAA,CALxBhD,OAAAiD,UAAU,CACTC,SAAU,WACVC,YAAa,uBACbC,UAAW,CAAC,2BAEDhD,GAAb,GAAaiD,QAAAjD,aAAAA","file":"app.component.min.js","sourcesContent":["import { Component, OnInit, OnDestroy, OnChanges,DoCheck } from '@angular/core';\nimport { Breakpoints, BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Router,Route, Event, NavigationStart, NavigationEnd, NavigationCancel,ActivatedRoute, NavigationError } from '@angular/router';\nimport { AuthenticationService } from './_services';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnChanges, OnDestroy {\n  title = 'ng crm';\n  user: any = null;\n  isMobile: boolean;\n  mode = \"side\"\n  uiContent = \"content\"\n  progrssBarClass = \"progress-bar\";\n  isloading = true;\n   isadmin=false;\n  isMenuVisible=false;\n  \n\n  constructor(\n    // private loadingBar: SlimLoadingBarService,\n    private route: Router,\n    public authService: AuthenticationService,\n    private breakpointObserver: BreakpointObserver\n  )\n   {\n    console.log(\" constructor\")\n\n    this.isloading = true;\n\n    breakpointObserver.observe([\n      Breakpoints.HandsetLandscape,\n      Breakpoints.HandsetPortrait\n    ]).subscribe(result => {\n      console.log(result)\n      if (result.matches) {\n        // this.activateHandsetLayout();\n        this.isMobile = true;\n        this.mode = \"over\"\n        this.uiContent = \"mobile-content\"\n      }\n      else {\n        this.isMobile = false;\n        this.mode = \"side\"\n        this.uiContent = \"content\"\n      }\n    });\n\n    // this.route.events.subscribe((event: Event) => {\n    //   this.navigationInterceptor(event);\n    // })\n    //   ;\n  }\n\n  ngOnChanges() {\n    console.log(\" ngOnChanges\")\n  }\n\n\n  ngOnInit(): void {\n    console.log(\" ngOnInit\")\n    this.user = this.authService.getUser();\n    this.isloading = false;\n  }\n\n  logout(): void {\n    // localStorage.removeItem('currentUser');\n    this.authService.logout()\n    this.route.navigate(['login']);\n  }\n\n\n\n  isAuth(isAuth?: any) {\n    if (isAuth) {\n      this.user = this.authService.getUser()\n      // this.user = JSON.parse(localStorage.getItem(APP_USER_PROFILE)) || <User>{};\n    }\n  }\n\n  private navigationInterceptor(event: Event): void {\n    if (event instanceof NavigationStart) {\n      this. progrssBarClass = \"progress-bar\";\n      this.isloading = true;\n    }\n    if (event instanceof NavigationEnd) {\n      this. progrssBarClass = \"progress-bar-hidden\";\n      this.isloading = false;\n    }\n    if (event instanceof NavigationCancel) {\n      this. progrssBarClass = \"progress-bar-hidden\";\n      this.isloading = false;\n    }\n    if (event instanceof NavigationError) {\n      this. progrssBarClass = \"progress-bar-hidden\";\n      this.isloading = false;\n    }\n\n  }\n\n\n  ngOnDestroy() {\n    this.breakpointObserver.ngOnDestroy()\n    this.authService.logout()\n    //   this.router.events\n    // this.breakpoint.\n  }\n  ngDoCheck(): void {\n    let currentroute = this.route.url;\n    let role=sessionStorage.getItem('role');\n    if (currentroute == '/login' || currentroute == '/register') {\n      this.isMenuVisible = false\n    } else {\n      this.isMenuVisible = true\n    }\n\n    if (role == 'admin') {\n      this.isadmin = true;\n    }else{\n      this.isadmin = false;\n    }\n  }\n\n \n}\n"]}